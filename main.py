import os
import time
import base64
import requests
import openai
import datetime
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º .env

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ .env ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OAUTH_TOKEN = os.getenv("OAUTH_TOKEN")
CATALOG_ID = os.getenv("CATALOG_ID")

# --- OpenAI client ---
client = openai.OpenAI(api_key=OPENAI_API_KEY)

# --- aiogram core ---
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- FSM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ ---
class ImageStates(StatesGroup):
    waiting_for_prompt = State()

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IAM —Ç–æ–∫–µ–Ω–∞ –Ø–Ω–¥–µ–∫—Å–∞ ---
def get_iam_token(oauth_token):
    url = "https://iam.api.cloud.yandex.net/iam/v1/tokens"
    response = requests.post(url, json={"yandexPassportOauthToken": oauth_token})
    if response.status_code == 200:
        return response.json()["iamToken"]
    else:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ IAM_TOKEN: {response.status_code} {response.text}")

# --- /start ---
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º.\n"
        "–ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å, —á—Ç–æ–±—ã –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å–æ –º–Ω–æ–π, –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /image –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏."
    )

# --- /image: –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ ---
@dp.message(Command("image"))
async def image_command(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ (–ø—Ä–æ–º–ø—Ç):")
    await state.set_state(ImageStates.waiting_for_prompt)

# --- –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ ---
@dp.message(ImageStates.waiting_for_prompt)
async def handle_image_prompt(message: types.Message, state: FSMContext):
    prompt = message.text
    await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º IAM —Ç–æ–∫–µ–Ω
        iam_token = get_iam_token(OAUTH_TOKEN)
        # –ì–æ—Ç–æ–≤–∏–º –∑–∞–ø—Ä–æ—Å
        url = "https://llm.api.cloud.yandex.net/foundationModels/v1/imageGenerationAsync"
        headers = {
            "Authorization": f"Bearer {iam_token}",
            "Content-Type": "application/json"
        }
        data = {
            "modelUri": f"art://{CATALOG_ID}/yandex-art/latest",
            "generationOptions": {
                "seed": str(int(time.time())),
                "aspectRatio": {"widthRatio": "2", "heightRatio": "1"}
            },
            "messages": [{"weight": "1", "text": prompt}]
        }
        response = requests.post(url, headers=headers, json=data)
        if response.status_code != 200:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.status_code}\n{response.text}")
            await state.clear()
            return

        request_id = response.json().get("id")
        # –ù–µ–º–Ω–æ–≥–æ –∂–¥—ë–º, —á—Ç–æ–±—ã –Ø–Ω–¥–µ–∫—Å —É—Å–ø–µ–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
        time.sleep(10)
        url_check = f"https://llm.api.cloud.yandex.net/operations/{request_id}"
        headers_check = {"Authorization": f"Bearer {iam_token}"}
        response_check = requests.get(url_check, headers=headers_check)

        if (
            response_check.status_code == 200
            and "response" in response_check.json()
            and "image" in response_check.json()["response"]
        ):
            image_base64 = response_check.json()["response"]["image"]
            image_data = base64.b64decode(image_base64)
            timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
            filename = f"image_{timestamp}.jpeg"
            with open(filename, "wb") as file:
                file.write(image_data)
            photo = FSInputFile(filename)
            await message.answer_photo(photo, caption=f"–í–æ—Ç —Ç–≤–æ—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É:\n<code>{prompt}</code>", parse_mode=ParseMode.HTML)
            os.remove(filename)
        else:
            await message.answer("‚ùå –ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ –Ø–Ω–¥–µ–∫—Å–∞.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    await state.clear()  # –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# --- –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî GPT-4o-mini ---
@dp.message()
async def chat_handler(message: types.Message):
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini-2024-07-18",
            messages=[{"role": "user", "content": message.text}],
            max_tokens=400
        )
        answer = response.choices[0].message.content
    except Exception as e:
        answer = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ OpenAI: {e}"
    await message.answer(answer)

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
